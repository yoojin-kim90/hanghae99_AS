{"ast":null,"code":"import { firestore } from \"../../firebase\";\nconst word_db = firestore.collection(\"wordlist\"); // word.js\n\n/**\n * 액션 타입을 정해주고, \n * 액션 생성자를 만들고,\n * 리듀서를 만들어줘요!\n * \n * 그리고 나면, configureStore.js에서 rootReducer로 묶어주고 -> 미들웨어랑 엮어서 -> 스토어를 만들어줍니다.\n */\n// Actions\n\nconst LOAD = \"word/LOAD\";\nconst CREATE = \"word/CREATE\"; // wordList에 있던 가짜 데이터를 initialState로 옮겨옵니다.\n\nconst initialState = {\n  word_list: [{\n    id: \"list_0\",\n    word: \"ㅎ1ㅎ1\",\n    desc: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n    example: \"저 친구가 초콜릿을 줬어. ㅎ1ㅎ1\"\n  }, {\n    id: \"list_1\",\n    word: \"ㅎ1ㅎ1\",\n    desc: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n    example: \"저 친구가 초콜릿을 줬어. ㅎ1ㅎ1\"\n  }, {\n    id: \"list_3\",\n    word: \"ㅎ1ㅎ1\",\n    desc: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n    example: \"저 친구가 초콜릿을 줬어. ㅎ1ㅎ1\"\n  }]\n}; // Action Creators\n\nexport const loadWord = word_list => {\n  return {\n    type: LOAD,\n    word_list\n  };\n};\nexport const createWord = word => {\n  return {\n    type: CREATE,\n    word\n  };\n};\nexport const loadWordFB = () => {\n  return function (dispatch) {\n    word_db.get().then(docs => {\n      let word_data = [];\n      docs.forEach(doc => {\n        if (doc.exists) {\n          word_data = [...word_data, {\n            id: doc.id,\n            ...doc.data()\n          }];\n        }\n      });\n      dispatch(loadWord(word_data));\n    });\n  };\n};\nexport const addWordFB = word => {\n  return function (dispatch) {\n    let word_data = {\n      word: word,\n      desc: desc,\n      example: example\n    };\n    word_db.add(word_data).then(docRef => {\n      word_data = { ...word_data,\n        id: docRef.id\n      };\n      dispatch(createWord(word_data));\n    });\n  };\n}; // Reducer\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"word/LOAD\":\n      {\n        // return state;\n        if (action.word.length > 0) {\n          return {\n            list: action.word\n          };\n        } else {\n          return state;\n        }\n\n        ;\n      }\n\n    case \"word/CREATE\":\n      // 받아온 데이터를 추가한 새 리스트 만들기\n      const new_word_list = [...state.word_list, action.word]; //   state를 갈아끼워요\n\n      return { ...state,\n        word_list: new_word_list\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/gim-yujin/Desktop/sparta/sparta_react/react-as/src/redux/modules/word.js"],"names":["firestore","word_db","collection","LOAD","CREATE","initialState","word_list","id","word","desc","example","loadWord","type","createWord","loadWordFB","dispatch","get","then","docs","word_data","forEach","doc","exists","data","addWordFB","add","docRef","reducer","state","action","length","list","new_word_list"],"mappings":"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","sourcesContent":["import {firestore} from \"../../firebase\";\n\nconst word_db = firestore.collection(\"wordlist\");\n// word.js\n/**\n * 액션 타입을 정해주고, \n * 액션 생성자를 만들고,\n * 리듀서를 만들어줘요!\n * \n * 그리고 나면, configureStore.js에서 rootReducer로 묶어주고 -> 미들웨어랑 엮어서 -> 스토어를 만들어줍니다.\n */\n\n// Actions\nconst LOAD = \"word/LOAD\";\nconst CREATE = \"word/CREATE\";\n\n// wordList에 있던 가짜 데이터를 initialState로 옮겨옵니다.\nconst initialState = {\n  word_list: [\n    {\n      id: \"list_0\",\n      word: \"ㅎ1ㅎ1\",\n      desc: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n      example: \"저 친구가 초콜릿을 줬어. ㅎ1ㅎ1\",\n    },\n    {\n      id: \"list_1\",\n      word: \"ㅎ1ㅎ1\",\n      desc: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n      example: \"저 친구가 초콜릿을 줬어. ㅎ1ㅎ1\",\n    },\n    {\n      id: \"list_3\",\n      word: \"ㅎ1ㅎ1\",\n      desc: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n      example: \"저 친구가 초콜릿을 줬어. ㅎ1ㅎ1\",\n    },\n  ],\n};\n// Action Creators\nexport const loadWord = (word_list) => {\n  return { type: LOAD, word_list };\n};\n\nexport const createWord = (word) => {\n  return { type: CREATE, word };\n};\n\nexport const loadWordFB = () => {\n  return function (dispatch){\n    word_db.get().then((docs)=>{\n      let word_data = [];\n\n      docs.forEach((doc)=>{\n        if(doc.exists){\n          word_data = [...word_data,{id:doc.id,...doc.data()}];\n        }\n      });\n      dispatch(loadWord(word_data));\n    });\n  };\n}\n\nexport const addWordFB = (word) => {\n  return function(dispatch){\n    let word_data = {word: word, desc: desc, example: example};\n    word_db.add(word_data).then(docRef => {\n      word_data = {...word_data, id: docRef.id};\n      dispatch(createWord(word_data));\n    })\n  }\n}\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"word/LOAD\": {\n      // return state;\n      if(action.word.length > 0){\n        return {list: action.word};\n      } else {return state};\n      \n    }\n      \n      \n\n    case \"word/CREATE\":\n        // 받아온 데이터를 추가한 새 리스트 만들기\n      const new_word_list = [...state.word_list, action.word];\n\n    //   state를 갈아끼워요\n      return {...state, word_list: new_word_list };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}