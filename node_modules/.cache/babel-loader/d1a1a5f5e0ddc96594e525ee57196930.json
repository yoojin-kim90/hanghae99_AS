{"ast":null,"code":"var _jsxFileName = \"/Users/gim-yujin/Desktop/sparta/sparta_react/react-as/src/Write.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { createWord } from \"./redux/modules/word\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Write = props => {\n  _s();\n\n  // dispatch를 만들었어요!\n  const dispatch = useDispatch(); // 여기에서 ref도 세개 잡아줄 거예요. (과제 요구사항에서 ref로 input의 텍스트를 받아와달라고 했으니, ref를 써봅시다!)\n  // 각각 word_ref, desc_ref, example_ref라고 이름 붙였어요.\n  // 초기값은 null입니다! (<input ref={~~}/> <- 여기에서 ref= 다음에 나오는 {}에 넣어주기 전까지는 아무 값도 없단 뜻으로요!)\n\n  const word_ref = React.useRef(null);\n  const desc_ref = React.useRef(null);\n  const example_ref = React.useRef(null);\n\n  const addWord = () => {\n    //   가짜 데이터가 어떻게 생겨야 할까? 미리 생김새부터 떠올려봅니다.\n    //  1. {} <- 이런 딕셔너리 안에,\n    //  2. id, word, desc, example이 들어간다!\n    //     - 그럼 생김새는? {id: ~~~, word: ~~~, desc: ~~~, example: ~~~} 이렇게 생겨야죠!\n    //  3. 그럼 word, desc, example은 어디에서 가져올까요? -> ref에서 가져와야겠죠!\n    //     - useRef를 먼저 잡아주고, input의 ref에 넣어줍니다. 그리고 ref담고 있는 변수명.currect로 가져오면 끝!\n    const word = {\n      id: \"word_11111\",\n      // id는 임시로 아무거나 넣어요\n      word: word_ref.current.value,\n      // input에서 text값에 접근하려면 ~~.value로 접근해요. (word_ref.current가 input이에요.)\n      desc: desc_ref.current.value,\n      example: example_ref.current.value\n    }; // 리덕스에 가짜 데이터를 넣어볼게요!\n\n    dispatch(createWord(word)); // 데이터를 넣고 나면 목록 페이지로 이동합시다.\n\n    props.history.replace('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"\\uB2E8\\uC5B4 \\uCD94\\uAC00\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB2E8\\uC5B4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: word_ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC124\\uBA85\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: desc_ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC608\\uC2DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: example_ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: addWord,\n      children: \"\\uCD94\\uAC00\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}; // 제목 스타일을 잡아줄 거예요.\n\n\n_s(Write, \"UidswWltd3Qky+aJKEHbobdY/bQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Write;\nconst Title = styled.h1`\n  width: 90vw;\n  margin: 8px auto;\n`; // input이 들어갈 부분을 감싸줄거예요. 배경색도 흰색으로 줘볼게요!\n// 이 div 아래에 있는 p 태그에 접근할 때는 & > p로 접근할 수 있어요.\n// 이 div 아래에 있는 input 태그에 접근할 때는 & > input으로 접근할 수 있어요.\n\n_c2 = Title;\nconst InputWrapper = styled.div`\n  width: 300px;\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 8px 16px;\n  margin: 8px auto;\n  box-sizing: border-box;\n  background-color: #ffffff;\n  & > p {\n    text-decoration: underline;\n    font-size: 8px;\n    color: #888888;\n    margin: 4px 0px;\n  }\n\n  & > input {\n    border: 1px solid #000000;\n    width: 100%;\n    padding: 2px 4px;\n    margin: 4px 0px;\n    box-sizing: border-box;\n  }\n`; // 추가하기 버튼 스타일을 잡아줄거예요.\n\n_c3 = InputWrapper;\nconst Button = styled.button`\n  background-color: #6100ff;\n  width: 400px;\n  color: #ffffff;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 8px 0px;\n  margin: 16px;\n`;\n_c4 = Button;\nexport default Write;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Write\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"InputWrapper\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/gim-yujin/Desktop/sparta/sparta_react/react-as/src/Write.js"],"names":["React","styled","useDispatch","createWord","Write","props","dispatch","word_ref","useRef","desc_ref","example_ref","addWord","word","id","current","value","desc","example","history","replace","Title","h1","InputWrapper","div","Button","button"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB;AACA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAFuB,CAIvB;AACA;AACA;;AAEA,QAAMK,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAa,IAAb,CAAjB;AACA,QAAMC,QAAQ,GAAGT,KAAK,CAACQ,MAAN,CAAa,IAAb,CAAjB;AACA,QAAME,WAAW,GAAGV,KAAK,CAACQ,MAAN,CAAa,IAAb,CAApB;;AAEA,QAAMG,OAAO,GAAG,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AAEA,UAAMC,IAAI,GAAG;AACXC,MAAAA,EAAE,EAAE,YADO;AACO;AAClBD,MAAAA,IAAI,EAAEL,QAAQ,CAACO,OAAT,CAAiBC,KAFZ;AAEmB;AAC9BC,MAAAA,IAAI,EAAEP,QAAQ,CAACK,OAAT,CAAiBC,KAHZ;AAIXE,MAAAA,OAAO,EAAEP,WAAW,CAACI,OAAZ,CAAoBC;AAJlB,KAAb,CARoB,CAepB;;AACAT,IAAAA,QAAQ,CAACH,UAAU,CAACS,IAAD,CAAX,CAAR,CAhBoB,CAiBpB;;AACAP,IAAAA,KAAK,CAACa,OAAN,CAAcC,OAAd,CAAsB,GAAtB;AACD,GAnBD;;AAqBA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEZ;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,YAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEE;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAYE,QAAC,YAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEC;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAkBE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvDD,C,CAyDA;;;GAzDMP,K;UAEaF,W;;;KAFbE,K;AA0DN,MAAMgB,KAAK,GAAGnB,MAAM,CAACoB,EAAG;AACxB;AACA;AACA,CAHA,C,CAKA;AACA;AACA;;MAPMD,K;AAQN,MAAME,YAAY,GAAGrB,MAAM,CAACsB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvBA,C,CAyBA;;MAzBMD,Y;AA0BN,MAAME,MAAM,GAAGvB,MAAM,CAACwB,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;MAAMD,M;AAaN,eAAepB,KAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useDispatch } from \"react-redux\";\nimport { createWord } from \"./redux/modules/word\";\n\nconst Write = (props) => {\n  // dispatch를 만들었어요!\n  const dispatch = useDispatch();\n\n  // 여기에서 ref도 세개 잡아줄 거예요. (과제 요구사항에서 ref로 input의 텍스트를 받아와달라고 했으니, ref를 써봅시다!)\n  // 각각 word_ref, desc_ref, example_ref라고 이름 붙였어요.\n  // 초기값은 null입니다! (<input ref={~~}/> <- 여기에서 ref= 다음에 나오는 {}에 넣어주기 전까지는 아무 값도 없단 뜻으로요!)\n\n  const word_ref = React.useRef(null);\n  const desc_ref = React.useRef(null);\n  const example_ref = React.useRef(null);\n\n  const addWord = () => {\n    //   가짜 데이터가 어떻게 생겨야 할까? 미리 생김새부터 떠올려봅니다.\n    //  1. {} <- 이런 딕셔너리 안에,\n    //  2. id, word, desc, example이 들어간다!\n    //     - 그럼 생김새는? {id: ~~~, word: ~~~, desc: ~~~, example: ~~~} 이렇게 생겨야죠!\n    //  3. 그럼 word, desc, example은 어디에서 가져올까요? -> ref에서 가져와야겠죠!\n    //     - useRef를 먼저 잡아주고, input의 ref에 넣어줍니다. 그리고 ref담고 있는 변수명.currect로 가져오면 끝!\n\n    const word = {\n      id: \"word_11111\", // id는 임시로 아무거나 넣어요\n      word: word_ref.current.value, // input에서 text값에 접근하려면 ~~.value로 접근해요. (word_ref.current가 input이에요.)\n      desc: desc_ref.current.value,\n      example: example_ref.current.value,\n    };\n\n    // 리덕스에 가짜 데이터를 넣어볼게요!\n    dispatch(createWord(word));\n    // 데이터를 넣고 나면 목록 페이지로 이동합시다.\n    props.history.replace('/');\n  };\n\n  return (\n    <React.Fragment>\n      <Title>단어 추가하기</Title>\n      <InputWrapper>\n        <p>단어</p>\n        <input ref={word_ref} />\n      </InputWrapper>\n\n      <InputWrapper>\n        <p>설명</p>\n        <input ref={desc_ref} />\n      </InputWrapper>\n\n      <InputWrapper>\n        <p>예시</p>\n        <input ref={example_ref} />\n      </InputWrapper>\n\n      {/* 추가 버튼을 누르면 추가할 가짜데이터를 미리 꾸려볼게요. */}\n      <Button onClick={addWord}>추가하기</Button>\n    </React.Fragment>\n  );\n};\n\n// 제목 스타일을 잡아줄 거예요.\nconst Title = styled.h1`\n  width: 90vw;\n  margin: 8px auto;\n`;\n\n// input이 들어갈 부분을 감싸줄거예요. 배경색도 흰색으로 줘볼게요!\n// 이 div 아래에 있는 p 태그에 접근할 때는 & > p로 접근할 수 있어요.\n// 이 div 아래에 있는 input 태그에 접근할 때는 & > input으로 접근할 수 있어요.\nconst InputWrapper = styled.div`\n  width: 300px;\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 8px 16px;\n  margin: 8px auto;\n  box-sizing: border-box;\n  background-color: #ffffff;\n  & > p {\n    text-decoration: underline;\n    font-size: 8px;\n    color: #888888;\n    margin: 4px 0px;\n  }\n\n  & > input {\n    border: 1px solid #000000;\n    width: 100%;\n    padding: 2px 4px;\n    margin: 4px 0px;\n    box-sizing: border-box;\n  }\n`;\n\n// 추가하기 버튼 스타일을 잡아줄거예요.\nconst Button = styled.button`\n  background-color: #6100ff;\n  width: 400px;\n  color: #ffffff;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 8px 0px;\n  margin: 16px;\n`;\n\nexport default Write;\n"]},"metadata":{},"sourceType":"module"}